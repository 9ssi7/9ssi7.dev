---
import Icon from "@/components/Icon.astro";
import TimelineItems, {
  AllCategories,
  TimelineCategoriesAsResponsiveDate,
  TimelineCategoriesAsStaticDate,
  TimelineCategoryColors,
  TimelineCategoryIcons,
  TimelineTagColors,
  TimelineTagIcons,
  type TimelineCategory,
} from "@/data/timeline";
import { getLangFromHeaders, useI18n } from "@/i18n/utils";
import { ExternalLink, LayoutGrid } from "@lucide/astro";

type Props = {
  class?: string;
};

const { class: className } = Astro.props;

const locale = getLangFromHeaders(Astro.request.headers);
const { t, d } = useI18n(locale);

const timelineDateOpts: Intl.DateTimeFormatOptions = {
  year: "numeric",
  month: "short",
  day: undefined,
};

const getDateByTimelineCategory = (
  category: TimelineCategory,
  date: string
): string => {
  if (TimelineCategoriesAsResponsiveDate.includes(category)) {
    return d(date, timelineDateOpts);
  }
  return d(date, timelineDateOpts);
};
---

<section class={`animate-fade-in ${className ? className : ""}`}>
  <h2 class="mb-5 font-medium text-gray-800 dark:text-neutral-200">{t("timeline_title")}</h2>

  <div class="grid grid-cols-2 md:flex md:flex-wrap gap-4">
    <a
      class="px-3 py-2 text-sm flex items-center gap-2 rounded-md min-w-max"
      href="/?category=all"
      data-filter-category="all"
    >
    <LayoutGrid class="size-4" />
      {t("category_all")}
    </a>
    {
      AllCategories.map((category) =>  <a
          class={`px-3 flex items-center gap-2 py-2 text-sm rounded-md col-span-1 hover:bg-blue-500/30 transition-colors duration-200`}
          href={`/?category=${category}`}
          data-filter-category={category}
        >
          <Icon name={TimelineCategoryIcons[category]} className="size-4" />
          {t(`category_${category}`)}
        </a>)
    }
  </div>
  <div class="relative mt-4 md:mt-7">
    <div
      class="absolute top-0 bottom-0 transform left-5 w-0.5 bg-third"
    >
    </div>
    <div class="relative">
      {
        TimelineItems.map((item) => <div class="timeline-item grid grid-cols-12 mb-10" data-category={item.category}>
            <div class={`z-10 rounded-full w-10 h-10 bg-third col-span-2 md:col-span-1`}>
              <span
                class={`w-10 h-10 rounded-full flex items-center justify-center ${TimelineCategoryColors[item.category]}`}
              >
                <Icon name={TimelineCategoryIcons[item.category]} className="size-4" />
              </span>
            </div>
            <div class="timeline-content relative col-span-10 md:col-span-11">
              <div class="grid grid-cols-12 gap-4">
                <div class="col-span-12">
                  <h3 class="mb-1 text-xs text-gray-600 dark:text-neutral-400">
                    {TimelineCategoriesAsStaticDate.includes(item.category) ? (
                      <>{getDateByTimelineCategory(item.category, item.date)}</>
                    ) : (
                      <>
                        {getDateByTimelineCategory(item.category, item.date)} -{" "}
                        {item.endDate
                          ? getDateByTimelineCategory(
                              item.category,
                              item.endDate
                            )
                          : t("basics_present")}
                      </>
                    )}
              </h3>
                  <p class="font-semibold text-sm text-gray-800 dark:text-neutral-200">
                    {item.translation[locale].title}
                  </p>
                </div>
              </div>
              {item.translation[locale].subtitle && (
                <p class="mb-1 text-xs text-gray-600 dark:text-neutral-400">
                  {item.translation[locale].subtitle}
                </p>
              )}
            <p class="mt-1 text-sm text-gray-600 dark:text-neutral-400">
              {item.translation[locale].description}
              </p>

              {item.tags && (
                <div class="mt-2 flex flex-wrap gap-2">
                  {item.tags.map((tag) => <span
                      class={`inline-flex text-sm items-center px-2 py-1 select-none rounded-full ${TimelineTagColors[tag]}`}
                    >
                      <Icon name={TimelineTagIcons[tag]} className="size-4" />
                      {tag}
                    </span>)}
                </div>
              )}
              {item.url && (
                <div class="mt-2">
                  <a
                    href={item.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="flex items-center gap-1 text-blue-600 dark:text-blue-400 text-sm"
                  >
                    <ExternalLink class="size-4" />
                    {t("basics_learn_more")}
                  </a>
                </div>
              )}
            </div>
          </div>)
      }
    </div>
  </div>
</section>

<script>
  import { isTimelineCategory, TimelineCategoryColors } from "@/data/timeline";

  window.addEventListener("DOMContentLoaded", () => {
    const url = new URL(window.location.href);
    const category = url.searchParams.get("category");
    const currentCategory = isTimelineCategory(category) ? category : "all";

    const timelineItems = document.querySelectorAll(".timeline-item");
    if (currentCategory != "all") {
      timelineItems.forEach((item: any) => {
        if (item.getAttribute("data-category") !== currentCategory) {
          item.style.display = "none";
        }
      });
      const currentEl = document.querySelector(
        `[data-filter-category=${currentCategory}]`
      );
      currentEl?.classList.add(
        ...TimelineCategoryColors[currentCategory].split(" ")
      );
    } else {
      document
        .querySelector(`[data-filter-category=all]`)
        ?.classList.add("bg-blue-500/20", "text-blue-500", "dark:text-white");
    }
  });
</script>

